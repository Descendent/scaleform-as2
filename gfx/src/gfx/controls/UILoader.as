import gfx.core.UIComponent;
/**
 * The CLIK UILoader loads an external SWF/GFX or image using only the path. UILoaders also support auto-sizing of the loaded asset to fit in its bounding box. Asset loading is asynchronous if both GFx and the platform running it has threading support.
 
	<b>Inspectable Properties</b>
	A MovieClip that derives from the UILoader component will have the following inspectable properties:<ul>
	<li><i>visible</i>: Hides the component if set to false.</li>
	<li><i>autoSize</i>: If set to true, sizes the loaded to content to fit in the UILoader’s bounds.</li>
	<li><i>maintainAspectRatio</i>: If true, the loaded content will be fit based on its aspect ratio inside the UILoader’s bounds. If false, then the content will be stretched to fit the UILoader bounds.</li>
	<li><i>source</i>: The SWF/GFX or image filename to load.</li>
    <li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li></ul>

	<b>States</b>
	There are no states for the UILoader component. If a SWF/GFX is loaded into the UILoader, then it may have its own states. 
	
	<b>Events</b>
	All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
	<li><i>type</i>: The event type.</li>
	<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the UILoader component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The component’s visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The component’s visible property has been set to false at runtime.</li>
	<li><i>progress</i>: Content is in the process of being loaded regardless whether the content can or cannot be loaded. This event will be fired continuously until either a) the content is loaded or b) the loading timeout has been reached.<ul>
		<li><i>loaded</i>: The percentage of data loaded. This property’s value is between 0 and 100.</li></ul></li>
	<li><i>complete</i>: Content loading has been completed.</li>
	<li><i>ioError</i>: Content specified in the source property could not be loaded.</li></ul>

 */
intrinsic class gfx.controls.UILoader extends UIComponent
{
	/** The total bytes loaded in the current load */
	public var bytesLoaded : Number;
	/** The current total bytes in the current load. */
	public var bytesTotal : Number;
	private var _source : String;
	private var _maintainAspectRatio : Boolean;
	private var _autoSize : Boolean;
	private var _visiblilityBeforeLoad : Boolean;
	private var loader : MovieClipLoader;
	private var _loadOK : Boolean;
	private var _sizeRetries : Number;
	private var bg : MovieClip;
	private var contentHolder : MovieClip;

	public function get autoSize() : Boolean;
	public function set autoSize(value:Boolean) : Void;

	public function get source() : String;
	public function set source(value:String) : Void;

	public function get maintainAspectRatio() : Boolean;
	public function set maintainAspectRatio(value:Boolean) : Void;

	/** 
	 * A read-only property that returns the loaded content of the UILoader.
	 */
	public function get content() : MovieClip;

	/**
	 * A read-only property that returns the percentage that the content is loaded. The percentage is normalized to a 0-100 range.
	 */
	public function get percentLoaded() : Number;


	/**
	 * The constructor is called when a UILoader or a sub-class of UILoader is instantiated on stage or by using {@code attachMovie()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend UILoader, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function UILoader();

	/**
	 * Unload the currently loaded content, or stop any pending or active load.
	 */
	public function unload() : Void;

	/** @exclude */
	public function toString() : String;

	private function configUI() : Void;

	private function load(url:String) : Void;

	private function draw() : Void;

	private function onLoadError() : Void;

	private function onLoadComplete() : Void;

	private function checkProgress() : Void;

}