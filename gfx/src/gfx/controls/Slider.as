import flash.external.ExternalInterface;
import gfx.controls.Button;
import gfx.core.UIComponent;
import gfx.ui.InputDetails;
import gfx.ui.NavigationCode;
import gfx.utils.Constraints;
/**
 * The Slider displays a numerical value in range, with a thumb to represent the value, as well as modify it via dragging.
 
	<b>Inspectable Properties</b>
	The inspectable properties of the Slider component:<ul>
	<li><i>visible</i>: Hides the component if set to false.</li>
	<li><i>disabled</i>: Disables the component if set to true.</li>
	<li><i>value</i>: The numeric value displayed by the Slider.</li>
	<li><i>minimum</i>: The minimum value of the Slider’s range.</li>
	<li><i>maximum</i>: The maximum value of the Slider’s range.</li>
	<li><i>snapping</i>: If set to true, then the thumb will snap to values that are multiples of snapInterval.</li>
	<li><i>snapInterval</i>: The snapping interval which determines which multiples of values the thumb snaps to. It has no effect if snapping is set to false.</li>
	<li><i>liveDragging</i>: If set to true, then the Slider will generate a change event when dragging the thumb. If false, then the Slider will only generate a change event after the dragging is over.</li>
	<li><i>offsetLeft</i>: Left offset for the thumb. A positive value will push the thumb inward.</li>
	<li><i>offsetRight</i>: Right offset for the thumb. A positive value will push the thumb inward.</li>
	<li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li>
	<li><i>soundMap</i>: Mapping between events and sound process. When an event is fired, the associated sound process will be fired via _global.gfxProcessSound, which should be overriden from the game engine using GFx FunctionObjects.</li></ul>
	
	<b>States</b>
	Like the ScrollIndicator and the ScrollBar, the Slider does not have explicit states. It uses the states of its child elements, the thumb and track Button components.
	
	<b>Events</b>
	All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
	<li><i>type</i>: The event type.</li>
	<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the Slider component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The component’s visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The component’s visible property has been set to false at runtime.</li>
	<li><i>focusIn</i>: The component has received focus.</li>
	<li><i>focusOut</i>: The component has lost focus.</li>
	<li><i>change</i>: The Slider value has changed.</li></ul>

 */
intrinsic class gfx.controls.Slider extends UIComponent
{
	public var liveDragging : Boolean;
	/** The mouse state of the button.  Mouse states can be "default", "disabled". */
	public var state : String;
	public var soundMap : Object;
	private var _minimum : Number;
	private var _maximum : Number;
	private var _value : Number;
	private var _snapInterval : Number;
	private var _snapping : Boolean;
	private var dragOffset : Object;
	private var constraints : Constraints;
	private var trackDragMouseIndex : Number;
	private var trackPressed : Boolean;
	private var thumbPressed : Boolean;
	private var offsetLeft : Number;
	private var offsetRight : Number;
	/** A reference to the thumb symbol in the Slider, used to display the slider {@code value}, and change the {@code value} via dragging. */
	public var thumb : Button;
	/** A reference to the track symbol in the Slider used to display the slider range, but also to jump to a specific value via clicking. */
	public var track : Button;

	public function get maximum() : Number;
	public function set maximum(value:Number) : Void;

	public function get minimum() : Number;
	public function set minimum(value:Number) : Void;

	public function get value() : Number;
	public function set value(value:Number) : Void;

	public function get disabled() : Boolean;
	public function set disabled(value:Boolean) : Void;

	/**
	 * The {@code value} of the {@code Slider}, to make it polymorphic with a {@link ScrollIndicator}.
	 */
	public function get position() : Number;
	public function set position(value:Number) : Void;

	public function get snapping() : Boolean;
	public function set snapping(value:Boolean) : Void;

	public function get snapInterval() : Number;
	public function set snapInterval(value:Number) : Void;


	/**
	 * The constructor is called when a Slider or a sub-class of Slider is instantiated on stage or by using {@code attachMovie()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend Slider, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function Slider();

	public function handleInput(details:InputDetails, pathToFocus:Array) : Boolean;

	/** @exclude */
	public function toString() : String;

	private function configUI() : Void;

	private function draw() : Void;

	private function changeFocus() : Void;

	private function updateThumb() : Void;

	private function beginDrag(event:Object) : Void;

	private function doDrag() : Void;

	private function endDrag() : Void;

	private function trackPress(e:Object) : Void;

	private function lockValue(value:Number) : Number;

	private function scrollWheel(delta:Number) : Void;

}