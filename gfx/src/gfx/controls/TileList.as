import flash.external.ExternalInterface;
import gfx.controls.CoreList;
import gfx.ui.InputDetails;
import gfx.ui.NavigationCode;
/**
 * The TileList, similar to the ScrollingList, is a list component that can scroll its elements. It can instantiate list items by itself or use existing list items on the stage. A ScrollIndicator or ScrollBar component can also be attached to this list component to provide scoll feedback and control. The difference between the TileList and the ScrollingList is that the TileList can support multiple rows and columns at the same time. List item selection can move in all four cardinal directions. This component is populated via a DataProvider. The dataProvider is assigned via code, as shown in the example below:
<i>tileList.dataProvider = ["item1", "item2", "item3", "item4", "item5"];</i>

	<b>Inspectable Properties</b>
	A MovieClip that derives from the TileList component will have the following inspectable properties:<ul>
	<li><i>visible</i>: Hides the component if set to false. This does not hide the attached scrollbar or any external list item renderers.</li>
	<li><i>disabled</i>: Disables the component if set to true. This does disable both the attached scrollbar and the list items (both internally created and external renderers).</li>
	<li><i>itemRenderer</i>: The symbol name of the ListItemRenderer. Used to create list item instances internally. Has no effect if the rendererInstanceName property is set.</li>
	<li><i>rendererInstanceName</i>: Prefix of the external list item renderers to use with this ScrollingList component. The list item instances on the stage must be prefixed with this property value. If this property is set to the value ‘r’, then all list item instances to be used with this component must have the following values: ‘r1’, ‘r2’, ‘r3’,… The first item should have the number 1.</li>
	<li><i>scrollBar</i>: Instance name of a ScrollBar component on the stage or a symbol name. If an instance name is specified, then the ScrollingList will hook into that instance. If a symbol name is specified, an instance of the symbol will be created by the ScrollingList.</li>
	<li><i>margin</i>: The margin between the boundary of the list component and the list items created internally. This value has no effect if the rendererInstanceName property is set.</li>
	<li><i>rowHeight</i>: The height of list item instances created internally. This value has no effect if the rendererInstanceName property is set.</li>
	<li><i>columnWidth</i>: The width of list item instances created internally. This value has no effect if the rendererInstanceName property is set.</li>
	<li><i>externalColumnCount</i>: When the rendererInstanceName property is set, this value is used to notify the TileList of the number of columns used by the external renderers.</li>
	<li><i>direction</i>: The scrolling direction. The semantics of rows and columns do not change depending on this value. </li>
    <li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li>
	<li><i>soundMap</i>: Mapping between events and sound process. When an event is fired, the associated sound process will be fired via _global.gfxProcessSound, which should be overriden from the game engine using GFx FunctionObjects.</li></ul>
	
	<b>States</b>
	The TileList component supports three states based on its focused and disabled properties. <ul>
	<li>default or enabled state.</li>
	<li>focused state, that typically highlights the component’s border area.</li>
	<li>disabled state.</li></ul>
	
	<b>Events</b>
	All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
	<li><i>type</i>: The event type.</li>
	<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the TileList component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The component’s visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The component’s visible property has been set to false at runtime.</li>
	<li><i>focusIn</i>: The component has received focus.</li>
	<li><i>focusOut</i>: The component has lost focus.</li>
	<li><i>change</i>: The selected index has changed.<ul>
		<li><i>index</i>: The new selected index. Number type. Values 0 to number of list items minus 1.</li></ul></li>
	<li><i>itemPress</i>: The list item has been pressed down.<ul>
		<li><i>renderer</i>: The list item that was pressed. CLIK Button type. </li>
		<li><i>item</i>: The data associated with the list item. This value is retrieved from the list’s DataProvider. AS2 Object type. </li>
		<li><i>index</i>: The index of the list item relative to the list’s DataProvider. Number type. Values 0 to number of list items minus 1.</li>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (Applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</li></ul></li>
	<li><i>itemClick</i>: A list item has been clicked.<ul>
		<li><i>renderer</i>: The list item that was clicked. CLIK Button type.</li>
		<li><i>item</i>: The data associated with the list item. This value is retrieved from the list’s DataProvider.AS2 Object type.</li>
		<li><i>index</i>: The index of the list item relative to the list’s DataProvider. Number type. Values 0 to number of list items minus 1.</li>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (Applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</li></ul></li>
	<li><i>itemDoubleClick</i>: The mouse cursor has been double clicked.<ul>
		<li><i>renderer</i>: The list item was double clicked. CLIK Button type.</li>
		<li><i>item</i>: The data associated with the list item. This value is retrieved from the list’s DataProvider. AS2 Object type.</li>
		<li><i>index</i>: The index of the list item relative to the list’s DataProvider. Number type. Values 0 to number of list items minus 1.</li>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (Applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</li></ul></li>
	<li><i>itemRollOver</i>: The mouse cursor has rolled over a list item.<ul>
		<li><i>renderer</i>: The list item that was rolled over. CLIK Button type.</li>
		<li><i>item</i>: The data associated with the list item. This value is retrieved from the list’s DataProvider. AS2 Object type.</li>
		<li><i>index</i>: The index of the list item relative to the list’s DataProvider. Number type. Values 0 to number of list items minus 1.</li>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (Applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</li></ul></li>
	<li><i>itemRollOut</i>: The mouse cursor has rolled out of a list item.<ul>
		<li><i>renderer</i>: The list item that was rolled out of. CLIK Button type.</li>
		<li><i>item</i>: The data associated with the list item. This value is retrieved from the list’s DataProvider. AS2 Object type.</li>
		<li><i>index</i>: The index of the list item relative to the list’s DataProvider. Number type. Values 0 to number of list items minus 1.</li>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (Applicable only for multi-mouse-cursor environments).  Number type. Values 0 to 3.</li></ul></li></ul>
 */
intrinsic class gfx.controls.TileList extends CoreList
{
	/** 
	 * Determines how focus "wraps" when the end or beginning of the component is reached.
	 	<ul>
		<li>"normal": The focus will leave the component when it reaches the end of the data</li>
		<li>"wrap": The selection will wrap to the beginning or end.</li>
		<li>"stick": The selection will stop when it reaches the end of the data.</li>
		</ul>
	 */
	public var wrapping : String;
	/** Determines if the "rowCount" property is applied directly, or converted by the component. ScrollingList does not use autoRowCount, but includes it for consistency. **/
	public var autoRowCount : Boolean;
	private var _rowHeight : Number;
	private var _columnWidth : Number;
	private var _direction : String;
	private var _scrollPosition : Number;
	private var _rowCount : Number;
	private var _columnCount : Number;
	private var totalRows : Number;
	private var totalColumns : Number;
	private var inspectableScrollBar : Object;
	private var autoScrollBar : Boolean;
	private var externalColumnCount : Number;
	private var margin : Number;
	private var _scrollBar : MovieClip;

	/**
	 * Get and set a ScrollBar for the list. The scrollBar can be set as a library linkage ID, an instance name on the stage relative to the component, or a reference to an existing ScrollBar elsewhere in the application. The automatic behaviour in this component only supports a vertical scrollBar, positioned on the top right, the entire height of the component.
	 */
	public function get scrollBar() : Object;
	public function set scrollBar(value:Object) : Void;

	public function get rowHeight() : Number;
	public function set rowHeight(value:Number) : Void;

	public function get columnWidth() : Number;
	public function set columnWidth(value:Number) : Void;

	/**
	 * Set the height of the component to accommodate the number of rows specified.
	 */
	public function get rowCount() : Number;
	public function set rowCount(value:Number) : Void;

	/**
	 * Set the width of the component to accommodate the number of columns specified.
	 */
	public function get columnCount() : Number;
	public function set columnCount(value:Number) : Void;

	public function get direction() : String;
	public function set direction(value:String) : Void;

	public function get disabled() : Boolean;
	public function set disabled(value:Boolean) : Void;

	/**
	 * The selected index of the DataProvider.  The itemRenderer of the selectedIndex will be set to {@code selected=true}.
	 */
	public function get selectedIndex() : Number;
	public function set selectedIndex(value:Number) : Void;

	/**
	 * The vertical or horizontal scroll position of the list.
	 */
	public function get scrollPosition() : Number;
	public function set scrollPosition(value:Number) : Void;

	/** @exclude */
	public function get availableWidth() : Number;

	/** @exclude */
	public function get availableHeight() : Number;


	/**
	 * The constructor is called when a TileList or a sub-class of TileList is instantiated on stage or by using {@code attachMovie()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend TileList, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function TileList();

	/**
	 * Scroll the list to the specified index.  If the index is currently visible, the position will not change. The scroll position will only change the minimum amount it has to to display the index.
	 * @param index The index to scroll to.
	 */
	public function scrollToIndex(index:Number) : Void;

	public function invalidateData() : Void;

	/** @exclude */
	public function setRendererList(value:Array, newColumnCount:Number) : Void;

	public function handleInput(details:InputDetails, pathToFocus:Array) : Boolean;

	/** @exclude */
	public function toString() : String;

	private function configUI() : Void;

	private function draw() : Void;

	private function drawLayout(rendererWidth:Number, rendererHeight:Number) : Void;

	private function changeFocus() : Void;

	private function populateData(data:Array) : Void;

	private function getRendererAt(index:Number) : MovieClip;

	private function handleScroll(event:Object) : Void;

	private function drawScrollBar() : Void;

	private function updateScrollBar() : Void;

	private function scrollWheel(delta:Number) : Void;

	private function setState() : Void;

}