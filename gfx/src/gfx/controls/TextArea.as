import flash.external.ExternalInterface;
import gfx.controls.ScrollBar;
import gfx.controls.TextInput;
import gfx.ui.InputDetails;
import gfx.ui.NavigationCode;
import flash.geom.Rectangle;
/**
 * TextArea is an editable text field component that supports multi-line text and an optional ScrollBar. It is derived from the CLIK TextInput component and thus includes all of the functionality and properties of TextInput. TextArea also shares the same states as its parent component.
 
	<b>Inspectable Properties</b>
	The inspectable properties of the TextArea component are similar to TextInput with a couple of additions and the omission of the password property. The additions are related to the CLIK ScrollBar component:<ul>
	<li><i>text</i>: Sets the text of the textField.</li>
	<li><i>visible</i>: Hides the component if set to false.</li>
	<li><i>disabled</i>: Disables the component if set to true.</li>
	<li><i>editable</i>: Makes the TextInput non-editable if set to false.</li>
	<li><i>maxChars</i>: A number greater than zero limits the number of characters that can be entered in the textField.</li>
	<li><i>scrollBar</i>: Instance name of the CLIK ScrollBar component to use, or a linkage ID to the ScrollBar symbol – an instance will be created by the TextArea in this case.</li>
	<li><i>scrollPolicy</i>: When set to “auto” the scrollBar will only show if there is enough text to scroll. The ScrollBar will always display if set to “on”, and never display if set to “off”. This property only affects the component if a ScrollBar is assigned to it (see the scrollBar property).</li>
	<li><i>defaultText</i>: Text to display when the textField is empty. This text is formatted by the defaultTextFormat object, which is by default set to light gray and italics.</li>
	<li><i>actAsButton</i>: If true, then the TextArea will behave similar to a Button when not focused and support rollOver and rollOut states. Once focused via mouse press or tab, the TextArea reverts to its normal mode until focus is lost.</li>
	<li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li>
	<li><i>soundMap</i>: Mapping between events and sound process. When an event is fired, the associated sound process will be fired via _global.gfxProcessSound, which should be overriden from the game engine using GFx FunctionObjects.</li></ul>

	<b>States</b>
	Like its parent, TextInput, the TextArea component supports three states based on its focused and disabled properties.<ul>
	<li>default or enabled state.</li>
	<li>focused state, typically a represented by a highlighted border around the textField.</li>
	<li>disabled state.</li></ul>

	<b>Events</b>
	All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
	<li><i>type</i>: The event type.</li>
	<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the TextArea component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The component’s visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The component’s visible property has been set to false at runtime.</li>
	<li><i>focusIn</i>: The component has received focus.</li>
	<li><i>focusOut</i>: The component has lost focus.</li>
	<li><i>textChange</i>: The text field contents have changed.</li>
	<li><i>scroll</i>: The text area has been scrolled.</li>
	<li><i>rollOver</i>: The mouse cursor has rolled over the component when not focused. Only fired when the actAsButton property is set.<ul>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</li></ul></li>
	<li><i>rollOut</i>: The mouse cursor has rolled out of the component when not focused. Only fired when the actAsButton property is set.<ul>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</</li></ul></li></ul>

 */
intrinsic class gfx.controls.TextArea extends TextInput
{
	public var soundMap : Object;
	private var _scrollPolicy : String;
	private var _position : Number;
	private var maxscroll : Number;
	private var inspectableScrollBar : Object;
	private var autoScrollBar : Boolean;
	private var resetScrollPosition : Boolean;
	private var _scrollBar : MovieClip;
	private var container : MovieClip;

	/**
	 * The vertical scroll position of the text.
	 */
	public function get position() : Number;
	public function set position(value:Number) : Void;

	public function get scrollPolicy() : String;
	public function set scrollPolicy(value:String) : Void;

	/**
	 * The component to use as a scrollBar.  The ScrollBar can be defined using a component instance in the {@code _parent} scope, or by passing a linkage name to a ScrollBar symbol in the library. Unlike other scrolling components, only ScrollBars (including ScrollIndicator) can be used to scroll the TextArea.
	 */
	public function get scrollBar() : Object;
	public function set scrollBar(value:Object) : Void;

	public function get disabled() : Boolean;
	public function set disabled(value:Boolean) : Void;


	/**
	 * The constructor is called when a TextArea or a sub-class of TextArea is instantiated on stage or by using {@code attachMovie()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend TextArea, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function TextArea();

	/** @exclude */
	public function toString() : String;

	public function handleInput(details:InputDetails, pathToFocus:Array) : Boolean;

	private function configUI() : Void;

	private function draw() : Void;

	private function updateText() : Void;

	private function updateTextField() : Void;

	private function updateScrollBar() : Void;

	private function onChanged(target:Object) : Void;

	private function onScroller() : Void;

	private function scrollWheel(delta:Number) : Void;

}