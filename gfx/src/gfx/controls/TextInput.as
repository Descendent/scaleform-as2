import flash.external.ExternalInterface;
import gfx.core.UIComponent;
import gfx.ui.InputDetails;
import gfx.ui.NavigationCode;
import gfx.utils.Constraints;
import gfx.utils.Locale;
import System.capabilities;
/**
 * TextInput is an editable text field component used to capture textual user input. Similar to the Label, this component is merely a wrapper for a standard textField, and therefore supports the same capabilities of the textField such as password mode, maximum number of characters and HTML text. Only a handful of these properties are exposed by the component itself, while the rest can be modified by directly accessing the TextInput’s textField instance.
    
   The TextInput component should be used for input, since noneditable text can be displayed using the Label. Similar to the Label, developers may substitute standard textFields for TextInput components based on their requirements. However, when developing sophisticated UIs, especially for PC applications, the TextInput component provides valuable extended capabilities over the standard textField.
   
   For starters, TextInput supports the focused and disabled state, which are not easily achieved with the standard textField. Due to the separated focus state, TextInput can support custom focus indicators, which are not included with the standard textField. Complex AS2 code is required to change the visual style of a standard textField, while the TextInput visual style can be configured easily on the timeline. The TextInput inspectable properties provide an easy workflow for designers and programmers who are not familiar with Flash Studio. Developers can also easily listen for events fired by the TextInput to create custom behaviors. 

   The TextInput also supports the standard selection and cut, copy, and paste functionality provided by the textField, including multi paragraph HTML formatted text. By default, the keyboard commands are select (Shift+Arrows), cut (Shift+Delete), copy (Ctrl+Insert), and paste (Shift+Insert).


 	<b>Inspectable Properties</b>
	The inspectable properties of the TextInput component are:<ul>
	<li><i>text</i>: Sets the text of the textField.</li>
	<li><i>visible</i>: Hides the component if set to false.</li>
	<li><i>disabled</i>: Disables the component if set to true.</li>
	<li><i>editable</i>: Makes the TextInput non-editable if set to false.</li>
	<li><i>maxChars</i>: A number greater than zero limits the number of characters that can be entered in the textField.</li>
	<li><i>password</i>: If true, sets the textField to display '*' characters instead of the real characters. The value of the textField will be the real characters entered by the user – returned by the text property.</li>
	<li><i>defaultText</i>: Text to display when the textField is empty. This text is formatted by the defaultTextFormat object, which is by default set to light gray and italics.</li>
	<li><i>actAsButton</i>: If true, then the TextInput will behave similar to a Button when not focused and support rollOver and rollOut states. Once focused via mouse press or tab, the TextInput reverts to its normal mode until focus is lost.</li>
    <li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li>
	<li><i>soundMap</i>: Mapping between events and sound process. When an event is fired, the associated sound process will be fired via _global.gfxProcessSound, which should be overriden from the game engine using GFx FunctionObjects.</li></ul>
		
	<b>States</b>
	The CLIK TextInput component supports three states based on its focused and disabled properties. <ul>
	<li>default or enabled state.</li>
	<li>focused state, typically a represented by a highlighted border around the textField.</li>
	<li>disabled state.</li></ul>
	
	<b>Events</b>
	All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
	<li><i>type</i>: The event type.</li>
	<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the TextInput component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The component’s visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The component’s visible property has been set to false at runtime.</li>
	<li><i>focusIn</i>: The component has received focus.</li>
	<li><i>focusOut</i>: The component has lost focus.</li>
	<li><i>textChange</i>: The text field contents have changed.</li>
	<li><i>rollOver</i>: The mouse cursor has rolled over the component when not focused. Only fired when the actAsButton property is set.<ul>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</li></ul></li>
	<li><i>rollOut</i>: The mouse cursor has rolled out of the component when not focused. Only fired when the actAsButton property is set.<ul>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</</li></ul></li></ul>
 */
intrinsic class gfx.controls.TextInput extends UIComponent
{
	public var defaultText : String;
	/** The text format used to display the default text. By default it is set to color:0xAAAAAA and italic:true. */
	public var defaultTextFormat : TextFormat;
	public var soundMap : Object;
	private var _text : String;
	private var _password : Boolean;
	private var _maxChars : Number;
	private var _editable : Boolean;
	private var _selectable : Boolean;
	private var isHtml : Boolean;
	private var constraints : Constraints;
	private var actAsButton : Boolean;
	private var hscroll : Number;
	private var changeLock : Boolean;
	/** A reference the on-stage TextField instance. Note that when state changes are made, the textField instance may change, so changes made to it externally may be lost. */
	public var textField : TextField;

	public function get textID() : String;
	public function set textID(value:String) : Void;

	/**
	 * Get and set the text of the component using ActionScript. The {@code text} property can only set plain text. For formatted text, use the {@code htmlText} property, or set {@code html=true}, and use {@code TextFormat} instead.
	 */
	public function get text() : String;
	public function set text(value:String) : Void;

	/**
	 * Get and set the html text of the component. Html text can be formatted using the tags supported by ActionScript.
	 */
	public function get htmlText() : String;
	public function set htmlText(value:String) : Void;

	public function get editable() : Boolean;
	public function set editable(value:Boolean) : Void;

	public function get password() : Boolean;
	public function set password(value:Boolean) : Void;

	public function get maxChars() : Number;
	public function set maxChars(value:Number) : Void;

	public function get disabled() : Boolean;
	public function set disabled(value:Boolean) : Void;

	/**
	 * The length of the text in the textField.
	 */
	public function get length() : Number;


	/**
	 * The constructor is called when a TextInput or a sub-class of TextInput is instantiated on stage or by using {@code attachMovie()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend TextInput, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function TextInput();

	/**
	 * Append a new string to the existing text. The textField will be set to non-html rendering when this method is invoked.
	 */
	public function appendText(text:String) : Void;

	/**
	 * Append a new html string to the existing text. The textField will be set to html rendering when this method is invoked.
	 */
	public function appendHtml(text:String) : Void;

	public function handleInput(details:InputDetails, pathToFocus:Array) : Boolean;

	/** @exclude */
	public function toString() : String;

	private function configUI() : Void;

	private function setState() : Void;

	private function setMouseHandlers() : Void;

	private function handleMousePress(controllerIdx:Number, keyboardOrMouse:Number, button:Number) : Void;

	private function handleMouseRollOver(controllerIdx:Number) : Void;

	private function handleMouseRollOut(controllerIdx:Number) : Void;

	private function draw() : Void;

	private function changeFocus() : Void;

	private function updateText() : Void;

	private function updateTextField() : Void;

	private function onChanged(target:Object) : Void;

}