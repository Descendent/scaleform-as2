import flash.external.ExternalInterface;
import gfx.core.UIComponent;
import gfx.controls.ButtonGroup;
import gfx.ui.InputDetails;
import gfx.ui.NavigationCode;
import gfx.utils.Constraints;
import gfx.utils.Delegate;
import gfx.utils.Locale;
/**
 * 	Buttons are the foundation component of the CLIK framework and are used anywhere a clickable interface control is required. The default Button class (gfx.controls.Button) supports a textField to display a label, and states to visually indicate user interaction. Buttons can be used on their own, or as part of a composite component, such as ScrollBar arrows or the Slider thumb. Most interactive components that are click-activated compose or extend Button.
   
   	The CLIK Button is a general purpose button component, which supports mouse interaction, keyboard interaction, states and other functionality that allow it to be used in a multitude of user interfaces. It also supports toggle capability as well as animated states. The ToggleButton, AnimatedButton and AnimatedToggleButton provided in the Button.fla component source file all use the same base component class.
	
	<b>Inspectable Properties</b>
	The inspectable properties of the Button component are:<ul>
	<li><i>label</i>: Sets the label of the Button.</li>
	<li><i>toggle</i>: Sets the toggle property of the Button. If set to true, the Button will act as a toggle button.</li>
	<li><i>visible</i>: Hides the button if set to false.</li>
	<li><i>disabled</i>: Disables the button if set to true.</li>
	<li><i>disableFocus</i>: By default buttons receive focus for user interactions. Setting this property to true will disable focus acquisition.</li>
	    <li><i>disableConstraints</i>: The Button component contains a constraints object that determines the placement and scaling of the textField inside of the button when the component is resized. Setting this property to true will disable the constraints object. This is particularly useful if there is a need to resize or reposition the button's textField via a timeline animation AND the button component is never resized. If not disabled, the textField will be moved and scaled to its default values throughout its lifetime, thus nullifying any textField translation/scaling tweens that may have been created in the button's timeline.</li>
	<li><i>autoSize</i>: Determines if the button will scale to fit the text that it contains and which direction to align the resized button. Setting the autoSize property to {@code autoSize="none"} will leave its current size unchanged.</li>
	<li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li>
	<li><i>soundMap</i>: Mapping between events and sound process. When an event is fired, the associated sound process will be fired via _global.gfxProcessSound, which should be overriden from the game engine using GFx FunctionObjects.</li></ul>
	
	<b>States</b>
	The CLIK Button component supports different states based on user interaction. These states include <ul>
	<li>an up or default state.</li>
	<li>an over state when the mouse cursor is over the component, or when it is focused.</li>
	<li>a down state when the button is pressed.</li>
	<li>a disabled state.</li></ul>

	These  states are represented as keyframes in the Flash timeline, and are the minimal set of keyframes required for the Button component to operate correctly. There are other states that extend the capabilities of the component to support complex user interactions and animated transitions, and this information is provided in the Getting Started with CLIK Buttons document.	
	
	<b>Events</b>
	All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
	<li><i>type</i>: The event type.</li>
	<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the Button component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The visible property has been set to false at runtime.</li>
	<li><i>focusIn</i>: The button has received focus.</li>
	<li><i>focusOut</i>: The button has lost focus.</li>
	<li><i>select</i>: The selected property has changed.<ul>
		<li><i>selected</i>: The selected state of the Button, true for selected. Boolean type.</li></ul></li>
	<li><i>stateChange</i>: The button's state has changed.<ul>
		<li><i>state</i>: The Button's new state. String type, Values "up", "over", "down", etc.</li></ul></li>
	<li><i>rollOver</i>: The mouse cursor has rolled over the button.<ul>
		<li><i>controllerIdx</i>: The index of the controller used to generate the event (Applicable only for multi-controller environments). Number type. Values 0 to 3 (max 15).</li></ul></li>
	<li><i>rollOut</i>: The mouse cursor has rolled out of the button.<ul>
		<li><i>controllerIdx</i>: The index of the controller used to generate the event (Applicable only for multi-controller environments). Number type. Values 0 to 3 (max 15).</</li></ul></li>
	<li><i>press</i>: The button has been pressed.<ul>
		<li><i>controllerIdx</i>: The index of the controller used to generate the event (applicable only for multi-controller environments). Number type. Values 0 to 3 (max 15).</</li></ul></li>
	<li><i>doubleClick</i>: The button has been double clicked. Only fired when the {@link doubleClickEnabled} property is set.<ul>
		<li><i>controllerIdx</i>: The index of the controller used to generate the event (applicable only for multi-controller environments). Number type. Values 0 to 3 (max 15).</</li></ul></li>
	<li><i>click</i>: The button has been clicked.<ul>
		<li><i>controllerIdx</i>: The index of the controller used to generate the event (applicable only for multi-controller environments). Number type. Values 0 to 3 (max 15).</</li></ul></li>
	<li><i>dragOver</i>: The mouse cursor has been dragged over the button (while the left mouse button is pressed).<ul>
		<li><i>controllerIdx</i>: The index of the controller used to generate the event (applicable only for multi-controller environments). Number type. Values 0 to 3 (max 15).</</li></ul></li>
	<li><i>dragOut</i>: The mouse cursor has been dragged out of the button (while the left mouse button is pressed).<ul>
		<li><i>controllerIdx</i>: The index of the controller used to generate the event (applicable only for multi-controller environments).Number type. Values 0 to 3 (max 15).</</li></ul></li>
	<li><i>releaseOutside</i>: The mouse cursor has been dragged out of the button and the left mouse button has been released.<ul>
		<li><i>controllerIdx</i>: The index of the controller used to generate the event (applicable only for multi-controller environments).Number type. Values 0 to 3 (max 15).</</li></ul></li></ul>
*/
intrinsic class gfx.controls.Button extends UIComponent
{
	public var data : Object;
	/** The mouse state of the button.  Mouse states can be "over", "down", "up", and "release". */
	public var state : String;
	public var toggle : Boolean;
	/** Determines if the component dispatches double-click events. */
	public var doubleClickEnabled : Boolean;
	/** Determines if the button dispatches "click" events when pressed down and held. */
	public var autoRepeat : Boolean;
	/** Locks drag over and drag out state changes. Useful for scrollbar and slider thumbs. */
	public var lockDragStateChange : Boolean;
	public var soundMap : Object;
	private var _group : Object;
	private var _label : String;
	private var _selected : Boolean;
	private var _autoSize : String;
	private var _disableFocus : Boolean;
	private var _disableConstraints : Boolean;
	private var constraints : Constraints;
	private var inspectableGroupName : String;
	private var doubleClickDuration : Number;
	private var doubleClickInterval : Number;
	private var buttonRepeatDuration : Number;
	private var buttonRepeatDelay : Number;
	private var buttonRepeatInterval : Number;
	private var pressedByKeyboard : Boolean;
	/** A list of frames that apply to a given state. The frames will be called in order, and the last existing frame will be displayed. */
	private var stateMap : Object;
	/** A reference to the textField in the component.  The textField is an optional element. Note that when state changes are made, the textField instance may change, so changes made to it externally may be lost. */
	public var textField : TextField;
	/** A reference to a MovieClip that is used to denote focus. It can either have one frame (which will cause the Button to show/hide this focus movie by toggling its visibility), or have two named frames: show and hide, which will be played appropriately.*/
	public var focusIndicator : MovieClip;

	public function get labelID() : String;
	public function set labelID(value:String) : Void;

	/**
	 * The ActionScript-only label parameter that sets the text directly, and assumes localization has been handled externally.
	 */
	public function get label() : String;
	public function set label(value:String) : Void;

	public function get disabled() : Boolean;
	public function set disabled(value:Boolean) : Void;

	public function get selected() : Boolean;
	public function set selected(value:Boolean) : Void;

	/**
	 * The name of the {@link #group} that the button belongs to. If the group does not exist, it is created in the parent of the button so that other buttons with the same group name can belong to the same group.
	 * @see #group
	 * @see ButtonGroup
	 */
	public function get groupName() : String;
	public function set groupName(value:String) : Void;

	/**
	 * A reference to the {@link ButtonGroup} instance that the button belongs to. The group is usually created in the parent clip of the button, so buttons in the same MovieClip scope with the same name can behave as a group. ButtonGroups will only be created in the parent scope when automatically created.
	 * @see ButtonGroup
	 */
	public function get group() : Object;
	public function set group(value:Object) : Void;

	public function get disableFocus() : Boolean;
	public function set disableFocus(value:Boolean) : Void;

	public function get disableConstraints() : Boolean;
	public function set disableConstraints(value:Boolean) : Void;

	public function get autoSize() : String;
	public function set autoSize(value:String) : Void;


	/**
	 * The constructor is called when a Button or a sub-class of Button is instantiated on stage or by using {@code attachMovie()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend Button, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function Button();

	public function setSize(width:Number, height:Number) : Void;

	public function handleInput(details:InputDetails, pathToFocus:Array) : Boolean;

	/** @exclude */
	public function toString() : String;

	private function configUI() : Void;

	private function draw() : Void;

	private function updateAfterStateChange() : Void;

	private function calculateWidth() : Number;

	/**
	 * Realigns the component based on the autoSize property.
	 */
	private function alignForAutoSize() : Void;

	/**
	 * Set the current visible state.  The state is determined by getting a list of possible frame names based on the state, and applying a possible prefixes depending on the button state (eg, selected).  Flash and GFx will go to the last existing frame called, so we can use "fall-back" frames.
	 * @param state The name of the new state
	 * @see #getStatePrefixes
	 * @see #stateMap
	 */
	private function setState(state:String) : Void;

	/**
	 * Get a list of frame label prefixes for state management.  Prefixes are applied in the setState method.
	 * @see #setState
	 */
	private function getStatePrefixes() : Array;

	private function changeFocus() : Void;

	private function handleMouseRollOver(controllerIdx:Number) : Void;

	private function handleMouseRollOut(controllerIdx:Number) : Void;

	private function handleMousePress(controllerIdx:Number, keyboardOrMouse:Number, button:Number) : Void;

	private function handlePress(controllerIdx:Number) : Void;

	private function handleMouseRelease(controllerIdx:Number, keyboardOrMouse:Number, button:Number) : Void;

	private function handleRelease(controllerIdx:Number) : Void;

	/**
	 * The button has been "clicked", either by a mouse click, or a key press.
	 */
	private function handleClick(controllerIdx:Number, button:Number) : Void;

	private function handleDragOver(controllerIdx:Number, button:Number) : Void;

	private function handleDragOut(controllerIdx:Number, button:Number) : Void;

	private function handleReleaseOutside(controllerIdx:Number, button:Number) : Void;

	private function doubleClickExpired() : Void;

	private function beginButtonRepeat(controllerIdx:Number, button:Number) : Void;

	private function handleButtonRepeat(controllerIdx:Number, button:Number) : Void;

	private function clearRepeatInterval() : Void;

}