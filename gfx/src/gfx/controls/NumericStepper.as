import flash.external.ExternalInterface;
import gfx.core.UIComponent;
import gfx.controls.Button;
import gfx.ui.InputDetails;
import gfx.ui.NavigationCode;
import gfx.utils.Constraints;
/**
 * The NumericStepper component displays a single number in the range assigned to it, and supports the ability to increment and decrement the value based on an arbitrary step size.
 
	<b>Inspectable Properties</b>
	A MovieClip that derives from the NumericStepper component will have the following inspectable properties:<ul>
	<li><i>visible</i>: Hides the component if set to false.</li>
	<li><i>disabled</i>: Disables the component if set to true.</li>
	<li><i>value</i>: The numeric value displayed by the NumericStepper.</li>
	<li><i>minimum</i>: The minimum value of the NumericStepper’s range.</li> 
	<li><i>maximum</i>: The maximum value of the NumericStepper’s range.</li>
	<li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li>
	<li><i>soundMap</i>: Mapping between events and sound process. When an event is fired, the associated sound process will be fired via _global.gfxProcessSound, which should be overriden from the game engine using GFx FunctionObjects.</li></ul>
	 
	<b>States</b>
	The NumericStepper component supports three states based on its focused and disabled properties. <ul>
	<li>default or enabled state.</li>
	<li>focused state, that highlights the textField area.</li>
	<li>disabled state.</li></ul>
	
	<b>Events</b>
	All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
	<li><i>type</i>: The event type.</li>
	<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the NumericStepper component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The component's visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The component's visible property has been set to false at runtime.</li>
	<li><i>change</i>: The NumericStepper’s value has changed.</li>
	<li><i>stateChange</i>: The NumericStepper’s focused or disabled property has changed.<ul>
		<li><i>state</i>: Name of the new state. String type. Values "default", "focused" or "disabled".</li></ul></li></ul>
 */
intrinsic class gfx.controls.NumericStepper extends UIComponent
{
	public var stepSize : Number;
	public var soundMap : Object;
	private var _labelFunction : Function;
	private var _maximum : Number;
	private var _minimum : Number;
	private var _stepSize : Number;
	private var _value : Number;
	private var constraints : Constraints;
	/** An optional Button used to increment the {@code value}. */
	public var nextBtn : Button;
	/** An optional Button used to decrement the {@code value}. */
	public var prevBtn : Button;
	/** The TextField label used to display the {@code value}. Note that when state changes are made, the textField instance may change, so changes made to it externally may be lost. */
	public var textField : TextField;

	public function get maximum() : Number;
	public function set maximum(value:Number) : Void;

	public function get minimum() : Number;
	public function set minimum(value:Number) : Void;

	public function get value() : Number;
	public function set value(v:Number) : Void;

	public function get disabled() : Boolean;
	public function set disabled(value:Boolean) : Void;

	/**
	 * The function used to determine the label.
	 */
	public function get labelFunction() : Function;
	public function set labelFunction(value:Function) : Void;


	/**
	 * The constructor is called when a NumericStepper or a sub-class of NumericStepper is instantiated on stage or by using {@code attachMovie()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend NumericStepper, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function NumericStepper();

	/**
	 * Increment the {@code value} of the NumericStepper, using the {@code stepSize}.
	 */
	public function increment() : Void;

	/**
	 * Decrement the {@code value} of the NumericStepper, using the {@code stepSize}.
	 */
	public function decrement() : Void;

	public function handleInput(details:InputDetails, pathToFocus:Array) : Boolean;

	/** @exclude */
	public function toString() : String;

	private function configUI() : Void;

	private function draw() : Void;

	private function changeFocus() : Void;

	private function updateAfterStateChange() : Void;

	private function onNext(evtObj:Object) : Void;

	private function onPrev(evtObj:Object) : Void;

	private function lockValue(value:Number) : Number;

	private function updateLabel() : Void;

}