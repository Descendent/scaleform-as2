import flash.external.ExternalInterface;
import gfx.controls.StatusIndicator;
/**
 * The ProgressBar is similar to the StatusIndicator in that it also displays the status of an event or action using its timeline. However,it is also intended to be used in conjunction with a component or event that generates progress events. By assigning a target and setting its mode appropriately, the ProgressBar component will automatically change its visual state based on the loaded values (bytesLoaded and bytesTotal) of its target.
 	
	<b>Inspectable Properties</b>
	A MovieClip that derives from the ProgressBar component will have the following inspectable properties:<ul>
	<li><i>visible</i>: Hides the component if set to false.</li>
	<li><i>disabled</i>: Disables the component if set to true.</li>
	<li><i>target</i>: The target the ProgressBar will "listen" to, to determine the bytesLoaded and bytesTotal values.</li>
	<li><i>mode</i>: Listening mode of the ProgressBar. In “manual” mode, the progress values must be set using the setProgress method. In "polled" mode, the target must expose bytesLoaded and bytesTotal properties, and in "event" mode, the target must dispatch "progress" events, containing bytesLoaded and bytesTotal properties.</li>
	<li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li>
	<li><i>soundMap</i>: Mapping between events and sound process. When an event is fired, the associated sound process will be fired via _global.gfxProcessSound, which should be overriden from the game engine using GFx FunctionObjects.</li></ul>
	
	<b>States</b>
	There are no states for the ProgressBar component. The component’s frames are used to display the status of an event or action. 
	
	<b>Events</b>
	All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
	<li><i>type</i>: The event type.</li>
	<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the ProgressBar component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The component’s visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The component’s visible property has been set to false at runtime.</li>
	<li><i>progress</i>: Generated when the ProgressBar value changes.</li>
	<li><i>complete</i>: Generated when the ProgressBar value is equal to its maximum.</li></ul>

 */
intrinsic class gfx.controls.ProgressBar extends StatusIndicator
{
	public var soundMap : Object;
	private var _mode : String;
	private var targetClip : Object;
	private var inspectableTarget : String;

	/**
	 * The target the ProgressBar will "listen" to to determine the {@code bytesLoaded} and {@code bytesTotal}. In "polled" mode, the target must expose {@code bytesLoaded} and {@code bytesTotal} properties, and in "event" mode, the target must dispatch "progress" events, containing {@code bytesLoaded} and {@code bytesTotal} properties.
	 * @see #mode
	 */
	public function get target() : Object;
	public function set target(value:Object) : Void;

	public function get mode() : String;
	public function set mode(value:String) : Void;

	/**
	 * The percent loaded, which is the {@code value} property, normalized to a number between 0 and 100. 
	 */
	public function get percentLoaded() : Number;


	/**
	 * The constructor is called when a ProgressBar or a sub-class of ProgressBar is instantiated on stage or by using {@code attachMovie()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend ProgressBar, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function ProgressBar();

	/**
	 * Set the progress of the component when it is in "manual" mode.
	 * @param loaded The amount loaded.
	 * @param total The total loaded.
	 * @see #mode
	 */
	public function setProgress(loaded:Number, total:Number) : Void;

	/** @exclude */
	public function toString() : String;

	private function configUI() : Void;

	/**
	 * Set the value of the component as a percentage.  When the {@code value} changes, a "progress" event is dispatched, and when the {@code value} reaches {@code maximum}, a "complete" event is dispatched.
	 */
	private function setPercent(percent:Number) : Void;

	private function setUpTarget() : Void;

	private function pollTarget() : Void;

	private function handleProgress(event:Object) : Void;

	private function handleComplete() : Void;

}